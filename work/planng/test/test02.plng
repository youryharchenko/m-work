(test

[ (let {i:10 j:1} (if (== .j 0) (print zero_divide) (/ .i .j)))  10.0000]
[ (let {i:10 j:0} (if (<> .j 0) (/ .i .j) zero_divide))  zero_divide]
[ (not true)  false]
[ (not false)  true]
[ (set t true)  true]
[ (not .t)  false]
[ (is a a)  true]
[ (is a b)  false]
[ (is 1 1)  true]
[ (is 1.0000 1)  true]
[ (is 1 2)  false]
[ (is 1 a)  false]
[ (is (not true) (not true))  false]
[ (is false (not true))  true]
[ (is (not true) (quote (not true)))  false]
[ (is (do) null)  false]
[ (is null (do))  true]
[ .a  undefined]
[ (is .a 4)  true]
[ .a  4]
[ (is .a 3)  false]
[ .u  undefined]
[ (is .u 1)  true]
[ .u  1]
[ (set u undefined)  undefined]
[ .u  undefined]
[ (is .u 1)  true]
[ .u  1]
[ (let {r:undefined x:0 y:1 z:undefined} (set r [(is .u 2) (is .x 0) (is .y 0) (is .z 2)]))  [false true false true]]
[ (let {r:undefined x:0 y:1 z:undefined} (set r [(is .u 2) (is .x 0) (is .z 2) (is .y 0)]))  [false true true false]]
[ (let {r:undefined x:0 y:1 z:undefined} (set r (is [.x .y .z] [0 1 2])))  true]
[ (let {r:undefined x:0 y:1 z:undefined} (set r (is [.z .y .x] [2 1 0])))  true]
[ (let {r:undefined x:0 y:1 z:undefined} (set r (is [.z .y .x] [2 1 3])))  false]
[ (let {r:undefined x:0 y:undefined z:undefined} (set r (is [.x .y .z] [0 1 2])) [.r .x .y .z])  [true 0 1 2]]
[ (let {r:undefined x:0 y:undefined z:2} (set r (is [.x .y .z] [0 1 2])) [.r .x .y .z])  [true 0 1 2]]
[ (let {r:undefined x:0 y:undefined z:2} (set r (is [.x .y .z] [0 1 9])) [.r .x .y .z])  [false 0 undefined 2]]
[ (let {r:undefined x:0 y:undefined z:2} (set r (is [.x [.y .z]] [0 [1 2]])) [.r .x .y .z])  [true 0 1 2]]
[ (let {r:undefined x:0 y:undefined z:2} (set r (is [.x [.y .z]] [0 [1 9]])) [.r .x .y .z])  [false 0 undefined 2]]
[ (set u undefined)  undefined]
[ (set v undefined)  undefined]
[ {u:.u v:.v}  {u:undefined v:undefined}]
[ (is {b:.u c:.v} {a:1 b:2 c:3})  true]
[ {u:.u v:.v}  {u:2 v:3}]
[ (is {b:.u c:.v} {a:1 b:2 c:3})  true]
[ (is {b:.u c:.v} {a:1 b:-2 c:3})  false]
[ [(is (atom) a) (is (atom) 1) (is (atom) .u) (is (atom) (quote .u)) (is (atom) []) (is (atom) {})]  [true true true true false false]]
[ [(is (id) a) (is (id) 1) (is (id) .u) (is (id) (quote .u)) (is (id) []) (is (id) {})]  [true false false false false false]]
[ [(is (num) a) (is (num) 1) (is (num) .u) (is (num) (quote .u)) (is (num) []) (is (num) {})]  [false true true false false false]]
[ [(is (ref) a) (is (ref) 1) (is (ref) .u) (is (ref) (quote .u)) (is (ref) []) (is (ref) {})]  [false false false true false false]]
[ [(is (list) a) (is (list) 1) (is (list) .u) (is (list) (quote .u)) (is (list) []) (is (list) {})]  [false false false false true false]]
[ [(is (dict) a) (is (dict) 1) (is (dict) .u) (is (dict) (quote .u)) (is (dict) []) (is (dict) {})]  [false false false false false true]]
[ (is (func) (func [i] (set i (+ .i 1))))  true]


)