(+ 2 3.1 5 7) 
(* 2 3 5.4 7) 
(+ 1 (+ 1 (+ 1 1))) 
(* 1 (* 2 (* 3 4)))  
(* 1 (* 2 (* 3 4.0)))
(- 3 2) (- 3.0 2) (- 3 2.0) (- 3.0 2.0)
(/ 4 2) (/ 4.0 2) (/ 4 2.0) (/ 4.0 2.0)
(% 3 2) (% 3.0 2) (% 3 2.0) (% 3.0 2.0)

(print)
(print 1 2 3)
(print [(+ 0 1) (- 1 1) (+ 0 -1)])
(print (+ 2 4))

(quote)
(quote 1)
(quote (+ 1 1))

(eval)
(eval (+ 1 1))
(eval (quote (+ 1 1)))
(eval (quote (quote (+ 1 1))))
(quote (eval (quote (quote (+ 1 1)))))


(^ 2 10)
(^ 2 0.5)
(^ 1.5 2)

.a
(set a 0)
.a
(set b (+ 5 5))
.b
(set b (* 5 5))
.b
(set c b)
(set .c 0)
.b
(set f +)
(.f 2 2)

{}

{a:0 b:+ c:d e:[] f:(quote (+ 1 1)) g:.a h:(^ 2 10)}
{a : 0 b : + c : d e : [] f : (quote (+ 1 1)) g :.a h : (^ 2 10)}

(let {} (print .a) (print .b) (print .c))

(let {a:1 b:2} (print .a) (print .b) (print .c))

.a
(let {a: 5 b: 6} (set a (+ .a .b)))
.a

(let {a: 7 b: 8} (let {} (print .a .b)))

(let {a: 7 b: 8} (let {a: 9 b: 10} (print .a .b)) (print .a .b))

(let {a: 7 b: 8} (let {} (set a .b)) (print .a .b))
(let {a: 7 b: 8} (let {} (set a .b) (print .a .b)) (set b .a) (print .a .b))

(do)
(do (print .a) break)
(do break (print .a))
(do (print .a))

(func [x y] (+ .x .y))

((func [x y] (+ .x .y)) 1 1)
((func [x y] (+ .x .y)) 1 1 1)
(set inc (func [i] (+ .i 1)))
(set dec (func [i] (- .i 1)))
(.inc 3)
(.dec 3)
(set i 10)
(.inc .i)
(.dec .i)
.inc
.dec

(let {f: (func [n] (print (^ .x .n))) x: 2} (.f 10) (.f 16))

(== 1 1)
(== 1 1.0)
(== 1.0 1)
(== 1.0 1.0)
(== 1 1.1)
(== 1.1 1)
(== 1.0 1.0001)
(== 1 2)
(== (+ 2 2) 5)
(== (+ 2 2) 4)
(== [1 2 3] [1 (+ 1 1) (- 5 2)])
(== (quote (+ 2 2)) (quote (+ 2 2)))
(== (quote (+ 2 2)) (quote (+ 2 3)))
(== .inc .inc)
(== .inc .dec)
(set a 1) (set b 1)
(== .a .b)
(== (quote .a) (quote .b))
(== (quote .a) (quote .a))
(== {a:1 b:null} {a:1 b:null})
(== {a:1 b:null} {a:1 b:false})
(== {a:1} {a:1 b:null})
(== {a:1 b:null} {a:1} )

(> 2 1)
(> 1 2)
(> 2.0 1.0)
(> 1.0 2.0)
(> 2.0 1)
(> 1.0 2)
(< 1.0 2)
(<= 1.0 2)
(<= 1.0 1)
(<= 2.0 1)
(>= 1.0 2)
(>= 1.0 1)
(>= 2.0 1)
(<= 2 1.0)
(>= 1 2.0)
(>= 1 1.0)
(>= 2 1.0)
