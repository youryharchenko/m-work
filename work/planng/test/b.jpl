(let {i:10 j:1}
    (if (== .j 0) (print zero_divide) (/ .i .j))
)

(let {i: 10 j: 0}
    (if (<> .j 0) (/ .i .j) (print zero_divide))
)

(not true)
(not false)
(set t true)
(not .t)

#(let {i:0 n:10}
#    (while (lt .i 10)
#        (if (eq .i 5) break)
#        (set i (+ .i 1))
#        .i
#    )
#)

(is a a)
(is a b)

(is 1 1)
(is 1.0 1)
(is 1 2)

(is 1 a)

(is (not true) (not true))
(is false (not true))
(is (not true) (quote (not true)))

#(is [1 <atom>] [1 2])

(is (do) null)
(is null (do))

.a
(is .a 4) 
.a
(is .a 3) 

.u 
(is .u 1) 
.u 
(set u undefined) 
.u 
(is .u 1) 
.u

(let {x:0 y:1 z:undefined r:undefined}
    (set r [(is .u 2) (is .x 0) (is .y 0) (is .z 2)])
)

(let {x:0 y:1 z:undefined r:undefined}
    (set r [(is .u 2) (is .x 0) (is .z 2) (is .y 0)])
)

(let { x:0 y:1 z:undefined r:undefined}
    (set r (is [.x .y .z][0 1 2]))
)

(let { x:0 y:1 z:undefined r:undefined}
    (set r (is [.z .y .x][2 1 0]))
)
# comment
(let { x:0 y:1 z:undefined r:undefined}
    (set r (is [.z .y .x][2 1 3]))
)
# comment

(let { x:0 y:undefined z:undefined r:undefined}
    (set r (is [.x .y .z] [0 1 2]))
    [.r .x .y .z]
)

(let { x:0 y:undefined z:2 r:undefined}
    (set r (is [.x .y .z] [0 1 2]))
    [.r .x .y .z]
)

(let { x:0 y:undefined z:2 r:undefined}
    (set r (is [.x .y .z] [0 1 9]))
    [.r .x .y .z]
)

(let { x:0 y:undefined z:2 r:undefined}
    (set r (is [.x [.y .z]] [0 [1 2]]))
    [.r .x .y .z]
)

(let { x:0 y:undefined z:2 r:undefined}
    (set r (is [.x [.y .z]] [0 [1 9]]))
    [.r .x .y .z]
)


(set u undefined) (set v undefined)
{u: .u v: .v}
(is {b:.u c:.v} {a:1 b:2 c:3})
{u: .u v: .v}

(is {b:.u c:.v} {a:1 b:2 c:3})
(is {b:.u c:.v} {a:1 b:-2 c:3})

#[<> <atom><list 1>]
[(is (atom) a) (is (atom) 1)(is (atom) .u)(is (atom) (quote .u)) (is (atom) []) (is (atom) {})]
[(is (id) a) (is (id) 1)(is (id) .u)(is (id) (quote .u)) (is (id) []) (is (id) {})]
[(is (num) a) (is (num) 1)(is (num) .u)(is (num) (quote .u)) (is (num) []) (is (num) {})]
[(is (ref) a) (is (ref) 1)(is (ref) .u)(is (ref) (quote .u)) (is (ref) []) (is (ref) {})]
[(is (list) a) (is (list) 1)(is (list) .u)(is (list) (quote .u)) (is (list) []) (is (list) {})]
[(is (dict) a) (is (dict) 1)(is (dict) .u)(is (dict) (quote .u)) (is (dict) []) (is (dict) {})]
(is (func) (func [i] (set i (+ .i 1))))
[(is (any) a) (is (any) 1)(is (any) .u)(is (any) (quote .u)) (is (any) []) (is (any) {})]
[(is (non (atom)) a) (is (non (atom)) 1)(is (non (atom)) .u)(is (non (atom)) (quote .u)) (is (non (atom)) []) (is (non (atom)) {})]