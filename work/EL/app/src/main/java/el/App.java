/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package el;

import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTabbedPane;
import javax.swing.JTree;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.tree.DefaultMutableTreeNode;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class App {
    UIManager.LookAndFeelInfo[] looks = UIManager.getInstalledLookAndFeels();
    JFrame frame = new JFrame("EL - Ontologies + Agent-Oriented Design");

    JMenuBar mb = new JMenuBar();

    JMenu m1 = new JMenu("File");

    JMenu m2 = new JMenu("View");
    JMenuItem m2_1 = new JMenu("LookAndFeel");

    JMenu m3 = new JMenu("Help");

    DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode("System");
    DefaultMutableTreeNode ontoNode = new DefaultMutableTreeNode("Ontologies");
    DefaultMutableTreeNode agntNode = new DefaultMutableTreeNode("Agents");

    JTree tree = new JTree(rootNode);
    JScrollPane treeScrollPane = new JScrollPane(tree);

    JTabbedPane tabs = new JTabbedPane();
    JScrollPane tabsScrollPane = new JScrollPane(tabs);
    JSplitPane cenPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, treeScrollPane, tabsScrollPane);
    JPanel statPanel = new JPanel();

    void run() {

        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(1024, 720);

        setupMenu();
        setupTreeNodes();

        frame.getContentPane().add(BorderLayout.SOUTH, statPanel);
        frame.getContentPane().add(BorderLayout.NORTH, mb);
        frame.getContentPane().add(BorderLayout.CENTER, cenPane);

        try {
            UIManager.setLookAndFeel(looks[looks.length - 1].getClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }

        SwingUtilities.updateComponentTreeUI(frame);

        tree.setPreferredSize(new Dimension(300, 0));
        tree.expandRow(0);

        frame.setVisible(true);

    }

    void setupMenu() {
        mb.add(m1);
        mb.add(m2);
        mb.add(m3);

        // m1.add(m1_1);
        // m1.add(m1_2);

        m2.add(m2_1);

        for (UIManager.LookAndFeelInfo look : looks) {
            String name = look.getClassName();

            JMenuItem item = new JMenuItem(name);
            item.addActionListener(new LookListener());
            m2_1.add(item);
        }
    }

    void setupTreeNodes() {
        rootNode.add(ontoNode);
        rootNode.add(agntNode);
        //rootNode.add(w02_1_1Node);
        //rootNode.add(w02_1_2Node);
        //rootNode.add(w02_2_1Node);
        //rootNode.add(w02_2_2Node);
        //rootNode.add(w03Node);
        //rootNode.add(w04Node);
        //rootNode.add(w05Node);
        //rootNode.add(w06_1Node);
        //rootNode.add(w06_2Node);
        //rootNode.add(w07Node);
        //rootNode.add(w08Node);
        
    }

    public static void main(String[] args) {
        App app = new App();
        app.run();
    }

    class LookListener implements ActionListener {

        public void actionPerformed(ActionEvent e) {
            System.out.println(e.getActionCommand());
            try {
                UIManager.setLookAndFeel(e.getActionCommand());
                SwingUtilities.updateComponentTreeUI(frame);
            } catch (ClassNotFoundException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            } catch (InstantiationException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            } catch (IllegalAccessException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            } catch (UnsupportedLookAndFeelException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
        }
    }
}
